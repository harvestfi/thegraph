type Vault @entity {
  "address of the vault"
  id: ID!
  "timestamp vault was registered at the controller"
  timestamp: BigInt!
  "transaction vault was registered at the controller"
  transaction: Transaction!
  "current strategy"
  currStrategy: Strategy!
  "all strategies"
  strategies: [Strategy!]! @derivedFrom(field: "vault")
  "token locked up in vault"
  underlying: Token!
  "returned share token"
  fToken: Token!
  "most recent pool as detected by NotifyHelper is usually not null"
  currPool: Pool
  # "all pools that were at some point attached to vault"
  # pools: [Pool!]! @derivedFrom(field: "vault")
  "hard work done on vault"
  doHardWorks: [DoHardWork!]! @derivedFrom(field: "vault")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "vault")
  deposits: [Deposit!]! @derivedFrom(field: "vault")
}

type NewUniVault @entity {
  "address of the vault"
  id: ID!
}

type Strategy @entity {
  "strategy address"
  id: ID!
  "timestamp strategy was registered on the vault"
  timestamp: BigInt!
  "transaction strategy was registered on the vault"
  transaction: Transaction!
  "vault it belongs to"
  vault: Vault!
  "hard work done by strategy"
  doHardWorks: [DoHardWork!]! @derivedFrom(field: "strategy")
  "aggregated profit generated by strategy"
  aggregatedProfit: BigInt!
  "aggregated fee for profit sharing"
  aggregatedFee: BigInt!
}

enum PoolType {
  NoMintRewardPool
  PotPool
}

type Pool @entity {
  "pool address"
  id: ID!
  "timestamp pool was first rewarded via notifyhelper"
  timestamp: BigInt!
  "transaction pool was first rewarded via notifyhelper"
  transaction: Transaction!
  "vault can be null in very special cases but generally exists"
  vault: Vault
  "pool type"
  type: PoolType!
  # lpToken: Token!
  rewardTokens: [Token!]!
  rewards: [Reward!]! @derivedFrom(field: "pool")
}

type Reward @entity {
  # transaction hash alone is not unique, we need to add pool address
  "transactionhash-pooladdress-rewardtoken"
  id: ID!
  timestamp: BigInt!
  transaction: Transaction!
  pool: Pool!
  "token that is rewarded"
  token: Token!
  "amount of reward added"
  reward: BigInt!
  "reward rate after reward was added - valid untill next reward or periodFinish"
  rewardRate: BigInt!
  "timestamp when the pool runs out of rewards if no new rewards are added"
  periodFinish: BigInt!
}

type DoHardWork @entity {
  "transaction hash"
  id: ID!
  timestamp: BigInt!
  transaction: Transaction!
  "vault hard work was done on"
  vault: Vault!
  "strategy that was used for hardwork"
  strategy: Strategy!
  "price per full share after do hard work"
  pricePerFullShare: BigInt!
  "balance in vault at time of hard work"
  balanceInVault: BigInt!
  "balance in vault including invested portion"
  balanceWithInvestment: BigInt!
  "event associated with share price change emitted by controller"
  sharePriceChangeLog: SharePriceChangeLog @derivedFrom(field: "doHardWork")
  "profit log associated with do hard work - note that it might not exist"
  profitLog: ProfitLog @derivedFrom(field: "doHardWork")
}

type SharePriceChangeLog @entity {
  "transaction hash"
  id: ID!
  doHardWork: DoHardWork!
  "share price before do hardwork"
  oldSharePrice: BigInt!
  "share price after do hard work"
  newSharePrice: BigInt!
}

type ProfitLog @entity {
  "transaction hash"
  id: ID!
  "type of profit log event"
  type: ProfitLogType!
  "which do hard work the event was emitted"
  doHardWork: DoHardWork!
  "profit amount"
  profitAmount: BigInt!
  "fee for profit share"
  feeAmount: BigInt!
}

enum ProfitLogType {
  ProfitLogInReward
  ProfitAndBuybackLog
}


type User @entity{
  "address of user account"
  id: ID!
  withdrawals: [Withdrawal!]! @derivedFrom(field: "user")
  deposits: [Deposit!]! @derivedFrom(field: "user")
}

type Withdrawal @entity {
  id: ID!
  timestamp: BigInt!
  transaction: Transaction!
  vault: Vault!
  user: User!
  amount: BigInt!
}

type Deposit @entity {
  id: ID!
  timestamp: BigInt!
  transaction: Transaction!
  vault: Vault!
  user: User!
  amount: BigInt!
}

type Token @entity {
  "token address"
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
}

type Transaction @entity {
  "transaction hash"
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  blockHash: Bytes!
  from: Bytes!
  to: Bytes
  value: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
}

enum ContractRegistryAddressType {
  Pool
  Vault
}

type ContractRegistryAddress @entity {
  "contract registry address"
  id: ID!
  address: Bytes!
  contractType: ContractRegistryAddressType
  pool: Pool
  vault: Vault
}

